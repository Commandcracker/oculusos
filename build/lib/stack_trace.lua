local type=type;local a=type(debug)=="table"and type(debug.traceback)=="function"and debug.traceback;local function b(c)if c==nil or type(c)=="string"and not c:find(":%d+:")then return c end;if a then return a(tostring(c),2)else local d=3;local e={tostring(c),"stack traceback:"}while true do local f,g=pcall(error,"",d)if g==""then break end;e[#e+1]="  "..g;d=d+1 end;return table.concat(e,"\n")end end;local function h(i,j)local k,l={},{}for m in i:gmatch("([^\n]*)\n?")do k[#k+1]=m end;for m in j:gmatch("([^\n]*)\n?")do l[#l+1]=m end;local n,o=#k,#l;while n>=3 and k[n]==l[o]do table.remove(k,n)n,o=n-1,o-1 end;while n>=1 and k[n]:find("^\tstack_trace%.lua:%d+:")or k[n]=="\t[C]: in function 'xpcall'"or k[n]=="  xpcall: "do table.remove(k,n)n=n-1 end;return k end;local function p(q)local r;local s=table.pack(xpcall(q,b))if not s[1]then r=b("trace.lua:1:")end;local t,u=s[1],s[2]if not t and u~=nil then r=h(u,r)local v;for w=#r,1,-1 do if r[w]=="stack traceback:"then v=w;break end end;local x=15;if v and#r-v>x then local y=v+10;for w=#r-v-x,0,-1 do table.remove(r,y+w)end;table.insert(r,y,"  ...")end;return false,table.concat(r,"\n")end;return table.unpack(s,1,s.n)end;_ENV.traceback=b;_ENV.trim_traceback=h;_ENV.xpcall_with=p;function os.run(z,A,...)setmetatable(z,{__index=_G})local B,u=loadfile(A,z)if not B then printError(u)return false end;local t,u;if 1 then local C=table.pack(...)t,u=p(function()return B(table.unpack(C,1,C.n))end)else t,u=pcall(B,...)end;if not t and u and u~=""then printError(u)end;return t end
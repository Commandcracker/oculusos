local function a(b,...)error(b:format(...),0)end;local function c(d,e,f)e[d.name]=f or true end;local g={}function g:add(h,i)if type(h)=="string"then h={h}end;if not i then i={}end;i.names=h;for j=1,#h do local k=h[j]if k:sub(1,2)=="--"then self.options[k:sub(3)]=i elseif k:sub(1,1)=="-"then self.flags[k:sub(2)]=i else self.arguments[#self.arguments+1]=i;i.argument=true end end;table.insert(self.list,#self.list,i)if i.action==nil then i.action=c end;if i.required==nil then i.required=h[1]:sub(1,1)~="-"end;if i.name==nil then i.name=h[1]:gsub("^-+","")end;if i.mvar==nil then i.mvar=i.name:upper()end end;function g:parse(...)local l=table.pack(...)local j,m=1,l.n;local n=1;local e={}while j<=m do local o=l[j]j=j+1;if o:find("^%-%-([^=]+)=(.+)$")then local k,f=o:match("^%-%-([^=]+)=(.+)$")local o=self.options[k]if not o then a("Unknown argument %q",k)end;if not o.many and e[o.name]~=nil then a("%s has already been set",k)end;if not o.value then a("%s does not accept a value",k)end;o:action(e,f)elseif o:find("^%-%-(.*)$")then local k=o:match("^%-%-(.*)$")local o=self.options[k]if not o then a("Unknown argument %q",k)end;if not o.many and e[o.name]~=nil then a("%s has already been set",k)end;if o.value then local f=l[j]j=j+1;if not f then a("%s needs a value",k)end;o:action(e,f)else o:action(e)end elseif o:find("^%-(.+)$")then local p=o:match("^%-(.+)$")for q=1,#p do local k=p:sub(q,q)local o=self.flags[k]if not o then a("Unknown argument %q",k)end;if not o.many and e[o.name]~=nil then a("%s has already been set",k)end;if o.value then local f;if q==#p then f=l[j]j=j+1 else f=p:sub(q+1)end;if not f then a("%s expects a value",k)end;o:action(e,f)break else o:action(e)end end else local d=self.arguments[n]if d then d:action(e,o)n=n+1 else a("Unexpected argument %q",o)end end end;for j=1,#self.list do local o=self.list[j]if o and o.required and e[o.name]==nil then a("%s is required (use -h to see usage)",o.name)end end;return e end;local r={__name="ArgParser",__index=g}function create(s)local t=setmetatable({options={},flags={},arguments={},list={}},r)t:add({"--help","-?","-h"},{value=false,required=false,doc="Show this help message",action=function()if s then print(s)print()end;if term.isColor()then term.setTextColor(colors.orange)else term.setTextColor(colors.lightGray)end;print("Options:")for j=1,#t.list do local o=t.list[j]local k;if o.argument then k=o.mvar elseif o.value then k=o.names[1].."="..o.mvar else k=o.names[1]end;term.setTextColor(colors.white)term.write(" "..k.." ")if#o.names>1 then if term.isColor()then term.setTextColor(colors.brown)else term.setTextColor(colors.gray)end;term.write("("..table.concat(o.names,",",2)..") ")end;term.setTextColor(colors.lightGray)print(o.doc or"")end;error("",0)end})return t end
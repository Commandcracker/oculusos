--[[
--   Copyright (c) 2015-2021 Wojbie (wojbie@wojbie.net)
--   Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met:
--   1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
--   2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
--   3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
--   4. Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.
--   5. The origin of this software must not be misrepresented; you must not claim that you wrote the original software.
--   NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
]]
function printUsage()print("Usage: mirror <name> <program> <arguments>")return end;local a={...}if#a<2 then printUsage()return end;local b=a[1]if peripheral.getType(b)~="monitor"then printError("No monitor named "..b)return end;local c=a[2]local d=shell.resolveProgram(c)if d==nil then printError("No such program: "..c)return end;local e=function()shell.run(d,table.unpack(a,3))end;function createMultitable(...)local f={...}if#f==1 and f[1]and type(f[1])=="table"then f=f[1]end;if#f==0 then error("Expected table of tables or any tables to table. I know it makes no sense.",2)end;local g={["__index"]=function(h,i)if f and f[1]and f[1][i]then if type(f[1][i])=="function"then return function(...)local j={}local a={...}for k,l in ipairs(f)do if l[i]then if#j==0 then j={l[i](unpack(a))}else l[i](unpack(a))end end end;return unpack(j)end else return f[1][i]end else return nil end end,["__newindex"]=function(h,i,m)end,["__call"]=function(h,i)return f end,["__len"]=function(h,i)return f[1]and#f[1]or 0 end,["__metatable"]=false}local n={}for i,o in pairs(f[1])do n[i]=function(...)local j={}local a={...}for k,l in ipairs(f)do if l[i]then if#j==0 then j={l[i](unpack(a))}else l[i](unpack(a))end end end;return unpack(j)end end;return setmetatable(n,g)end;local p={"+","-","|"}local function q(r,s,t,b)if type(r)~="table"and type(r)~="string"or type(s)~="number"or type(t)~="number"or b~=nil and type(b)~="string"then error("Expected string/object, number, number, [string]",2)end;local u;if type(r)=="table"then u=r else u=peripheral.wrap(r)end;if not u then error("No monitor detected on side "..r,2)end;local v,w,x,y;local z,A;local B,C;local D;local E=window.create(u,1,1,s,t,false)local F=E.reposition;local function G()for k=1,C,1 do u.setCursorPos(1,k)if k<v then u.blit(D.e,D.f,D.b)elseif k==v then u.blit(D.n or D.t,D.f,D.b)elseif k<z then u.blit(D.m,D.f,D.b)elseif k==z then u.blit(D.t,D.f,D.b)else u.blit(D.e,D.f,D.b)end end end;local function H()if u.setTextScale then local I,J;for k=5,0.5,-0.5 do u.setTextScale(k)I,J=u.getSize()if I>s and J>t then break end end end;B,C=u.getSize()x=math.max((B-s)/2,0)y=math.ceil(x)x=math.floor(x)v=math.max((C-t)/2,0)w=math.ceil(v)v=math.floor(v)z=v+t+1;A=x+s+y;D={}D.e=string.rep(" ",A)D.t=string.rep(" ",math.max(0,x-1))..(x>0 and p[1]or"")..string.rep(p[2],s)..(y>0 and p[1]or"")..string.rep(" ",math.max(0,y-1))D.m=string.rep(" ",math.max(0,x-1))..(x>0 and p[3]or"")..string.rep(" ",s)..(y>0 and p[3]or"")..string.rep(" ",math.max(0,y-1))if b and type(b)=="string"and#b<=s then local K=string.sub(b,1,s)local L=(s-string.len(K))/2;local M=math.ceil(L)L=math.floor(L)D.n=string.rep(" ",math.max(0,x-1))..(x>0 and p[1]or"")..string.rep(p[2],L)..K..string.rep(p[2],M)..(y>0 and p[1]or"")..string.rep(" ",math.max(0,y-1))end;D.f=string.rep("7",A)D.b=string.rep("8",A)G()F(x+1,v+1,s,t)E.setVisible(true)end;H()E.redrawBorder=function()return G()end;E.synch=function()return H()end;E.setName=function(N)b=N~=nil and type(N)=="string"and N or nil;return H()end;E.resize=function(N,O)if type(N)~="number"or type(O)~="number"then error("Expected number, number",2)end;s,t=N,O;return H()end;E.localize=function(N,O)local P,Q=N-x,O-v;if P>0 and Q>0 and P<=s and Q<=t then return P,Q end end;return E end;local function R(e,S,b)if type(e)~="function"or S~=nil and type(S)~="table"or b~=nil and type(b)~="string"then error("Expected function, table, [string]",2)end;local h=term.current()local P,Q=h.getSize()local T={}local U={}if not S or#S==0 then peripheral.find("monitor",function(V,W)T[V]=q(V,P,Q,b)table.insert(U,T[V])end)else for k,l in pairs(S)do if peripheral.isPresent(l)and peripheral.getType(l)=="monitor"then T[l]=q(l,P,Q,b)table.insert(U,T[l])end end end;local X=createMultitable(U)local Y=createMultitable(h,X)term.redirect(Y)local Z=coroutine.create(e)local function _(...)local a0,a1=coroutine.resume(Z,...)if not a0 then printError(a1)end;return a1 end;local a0,a1=pcall(function()local a2=_()local a3={}while coroutine.status(Z)~="dead"do local a4={os.pullEventRaw()}if a4[1]=="term_resize"then X.resize(h.getSize())elseif a4[1]=="monitor_resize"and T[a4[2]]then if a3[a4[2]]then a3[a4[2]]=false else T[a4[2]].synch()a3[a4[2]]=true end end;if a2==nil or a4[1]==a2 or a4[1]=="terminate"then a2=_(table.unpack(a4))end;if coroutine.status(Z)~="dead"and(a2==nil or a2=="mouse_click")then if a4[1]=="monitor_touch"and T[a4[2]]then a4[3],a4[4]=T[a4[2]].localize(a4[3],a4[4])if a4[3]then a2=_("mouse_click",1,table.unpack(a4,3))if coroutine.status(Z)~="dead"and(a2==nil or a2=="mouse_up")then a2=_("mouse_up",1,table.unpack(a4,3))end end end end end end)term.redirect(h)if not a0 then printError(a1)end end;R(e,{b},c)
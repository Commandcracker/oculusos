local a={...}local b={}local c={connList=b}local d={"/oculusos/apis/","/","/usr/apis/","/disk/"}if not framebuffer then for e=1,#d do if fs.exists(d[e].."framebuffer")and os.loadAPI(d[e].."framebuffer")then break end end end;if not framebuffer then print("Couldn't find framebuffer API, using fallback")end;local function f(g,h)if term.current then return rednet.send(g,h,"tror")else return rednet.send(g,h)end end;local function i(g,j)if type(j)=="number"then j=os.startTimer(j)end;while true do event={os.pullEvent()}if event[1]=="rednet_message"and(g==nil and true or event[2]==g)and(not term.current and true or event[4]=="tror")then return event[3]elseif event[1]=="timer"and event[2]==j then return nil end end end;c.getRemoteID=function()for k,l in pairs(c.connList)do if l and type(l)=="table"and l.thread==coroutine.running()then if k=="localShell"then if c.serverNum then return c.serverNum else return nil end end;return k end end;if c.serverNum then return c.serverNum end;return nil end;c.send=function(h)local g=c.getRemoteID()if g then return f(g,h)end;return nil end;c.receive=function(j)return i(c.getRemoteID(),j)end;c.getClientCapabilities=function()if c.clientCapabilities then return c.clientCapabilities end;c.send("SP:;clientCapabilities")return c.receive(1)end;c.getRemoteConnections=function()local m={}for k,l in pairs(c.connList)do table.insert(m,k)if l.outbound then table.insert(m,l.outbound)end end;return m end;c.packFile=function(n)local o={}local p=0;local q=io.open(n,"rb")if q then local r=q:read()repeat o[#o+1]=r;p=p+1;if p%1000==0 then os.queueEvent("yield")os.pullEvent("yield")end;r=q:read()until not r;q:close()else return false end;local s={}for e=1,#o,3 do local t,u,v=o[e],o[e+1]or 0,o[e+2]or 0;table.insert(s,string.char(bit.band(bit.brshift(t,2),63)))table.insert(s,string.char(bit.bor(bit.band(bit.blshift(t,4),48),bit.band(bit.brshift(u,4),15))))table.insert(s,string.char(bit.bor(bit.band(bit.blshift(u,2),60),bit.band(bit.brshift(v,6),3))))table.insert(s,string.char(bit.band(v,63)))end;if#o%3==1 then s[#s]="="s[#s-1]="="elseif#o%3==2 then s[#s]="="end;return table.concat(s,"")end;c.unpackAndSaveFile=function(n,o)local s={}for e=1,#o,4 do local w,z,A,B=string.byte(string.sub(o,e,e)),string.byte(string.sub(o,e+1,e+1)),string.byte(string.sub(o,e+2,e+2)),string.byte(string.sub(o,e+3,e+3))table.insert(s,bit.band(bit.bor(bit.blshift(w,2),bit.brshift(z,4)),255))table.insert(s,bit.band(bit.bor(bit.blshift(z,4),bit.brshift(A,2)),255))table.insert(s,bit.band(bit.bor(bit.blshift(A,6),B),255))end;if string.sub(o,#o,#o)=="="then table.remove(s)if string.sub(o,#o-1,#o-1)=="="then table.remove(s)end end;local q=io.open(n,"wb")if q then for e=1,#s do q:write(s[e])if e%10==0 then os.startTimer(0.1)os.pullEvent("timer")end end;q:close()end end;local C={query="SQ",response="SR",data="SP",close="SC",fileQuery="FQ",fileSend="FS",fileResponse="FR",fileHeader="FH",fileData="FD",fileEnd="FE",textWrite="TW",textCursorPos="TC",textGetCursorPos="TG",textGetSize="TD",textInfo="TI",textClear="TE",textClearLine="TL",textScroll="TS",textBlink="TB",textColor="TF",textBackground="TK",textIsColor="TA",textTable="TT",event="EV",SQ="query",SR="response",SP="data",SC="close",FQ="fileQuery",FS="fileSend",FR="fileResponse",FH="fileHeader",FD="fileData",FE="fileEnd",TW="textWrite",TC="textCursorPos",TG="textGetCursorPos",TD="textGetSize",TI="textInfo",TE="textClear",TL="textClearLine",TS="textScroll",TB="textBlink",TF="textColor",TK="textBackground",TA="textIsColor",TT="textTable",EV="event"}local function D()local E=false;for F,G in ipairs(rs.getSides())do if peripheral.getType(G)=="modem"then if not rednet.isOpen(G)then rednet.open(G)end;E=true;break end end;return E end;local function H(g,I,message)if I and message then return f(g,C[I]..":;"..message)end end;local function J(g,K)g=tonumber(g)local L=nil;local M=false;if K then L=os.startTimer(K)end;while not M do local event,N,O=os.pullEvent()if event=="timer"and N==L then return false elseif event=="rednet_message"then sender,message=N,O;if g==sender and message then if C[string.sub(message,1,2)]then packetType=C[string.sub(message,1,2)]end;message=string.match(message,";(.*)")M=true end end end;return packetType,message end;local function P(conn,I,Q)if not I then return false end;if I=="textWrite"and Q then term.write(Q)elseif I=="textClear"then term.clear()elseif I=="textClearLine"then term.clearLine()elseif I=="textGetCursorPos"then local x,y=term.getCursorPos()H(conn,"textInfo",math.floor(x)..","..math.floor(y))elseif I=="textCursorPos"then local x,y=string.match(Q,"(%-?%d+),(%-?%d+)")term.setCursorPos(tonumber(x),tonumber(y))elseif I=="textBlink"then if Q=="true"then term.setCursorBlink(true)else term.setCursorBlink(false)end elseif I=="textGetSize"then x,y=term.getSize()H(conn,"textInfo",x..","..y)elseif I=="textScroll"and Q then term.scroll(tonumber(Q))elseif I=="textIsColor"then H(conn,"textInfo",tostring(term.isColor()))elseif I=="textColor"and Q then Q=tonumber(Q)if Q==1 or Q==32768 or term.isColor()then term.setTextColor(Q)end elseif I=="textBackground"and Q then Q=tonumber(Q)if Q==1 or Q==32768 or term.isColor()then term.setBackgroundColor(Q)end elseif I=="textTable"then local R=textutils.unserialize(Q)for e=1,R.sizeY do term.setCursorPos(1,e)local S=false;local T=1;while not S do local U=string.match(string.sub(R.textColor[e],T),string.sub(R.textColor[e],T,T).."*")local V=string.match(string.sub(R.backColor[e],T),string.sub(R.backColor[e],T,T).."*")term.setTextColor(2^tonumber(string.sub(U,1,1),16))term.setBackgroundColor(2^tonumber(string.sub(V,1,1),16))term.write(string.sub(R.text[e],T,T+math.min(#U,#V)-1))T=T+math.min(#U,#V)if T>R.sizeX then S=true end end end;term.setCursorPos(R.cursorX,R.cursorY)term.setCursorBlink(R.cursorBlink)end;return end;local function W(g)local X={}X.id=g;X.write=function(Y)return H(X.id,"textWrite",Y)end;X.clear=function()return H(X.id,"textClear","nil")end;X.clearLine=function()return H(X.id,"textClearLine","nil")end;X.getCursorPos=function()H(X.id,"textGetCursorPos","nil")local I,message=J(X.id,2)if I and I=="textInfo"then local x,y=string.match(message,"(%-?%d+),(%-?%d+)")return tonumber(x),tonumber(y)end end;X.setCursorPos=function(x,y)return H(X.id,"textCursorPos",math.floor(x)..","..math.floor(y))end;X.setCursorBlink=function(Z)if Z then return H(X.id,"textBlink","true")else return H(X.id,"textBlink","false")end end;X.getSize=function()H(X.id,"textGetSize","nil")local I,message=J(X.id,2)if I and I=="textInfo"then local x,y=string.match(message,"(%d+),(%d+)")return tonumber(x),tonumber(y)end end;X.scroll=function(_)return H(X.id,"textScroll",_)end;X.isColor=function()H(X.id,"textIsColor","nil")local I,message=J(X.id,2)if I and I=="textInfo"then if message=="true"then return true end end;return false end;X.isColour=X.isColor;X.setTextColor=function(a0)return H(X.id,"textColor",tostring(a0))end;X.setTextColour=X.setTextColor;X.setBackgroundColor=function(a0)return H(X.id,"textBackground",tostring(a0))end;X.setBackgroundColour=X.setBackgroundColor;return X end;local function a1(a2)if tonumber(a2)then return tonumber(a2)elseif term.current then return rednet.lookup("tror",a[1])end end;local function a3(conn,event)local l=b[conn]if b[conn]and(not b[conn].filter or event[1]==b[conn].filter)then b[conn].filter=nil;local _oldTerm=term.redirect(b[conn].target)local a4={coroutine.resume(b[conn].thread,unpack(event))}if a4[1]and a4[2]then b[conn].filter=a4[2]end;if coroutine.status(b[conn].thread)=="dead"and conn~="localShell"then H(conn,"close","disconnect")b[conn]=false end;if _oldTerm then term.redirect(_oldTerm)else term.restore()end;if b[conn]and conn~="localShell"and framebuffer and b[conn].target.changed then H(conn,"textTable",textutils.serialize(b[conn].target.buffer))b[conn].target.changed=false end end end;local a5={key=true,char=true,mouse_click=true,mouse_drag=true,mouse_scroll=true}local function a6(conn,x,y,a0)local a7={}local n="shell"if#a>=2 and shell.resolveProgram(a[2])then n=shell.resolveProgram(a[2])end;a7.thread=coroutine.create(function()local function a8(n)if fs.exists(n)then local a9=io.open(n,"r")local aa=a9:read()a9:close()return aa end end;if fs.exists("/.passwd")then while true do term.write("Password: ")input=read('*')if sha256.sha256(input)==a8("/.passwd")then break else printError("Incorrect password!")end end end;os.run({supports_scroll=false,shell=shell,multishell=multishell},shell.resolveProgram(n))end)if framebuffer then local ab={}local ac=framebuffer.new(x,y,a0)for ad,ae in pairs(ac)do if type(ad)=="string"and type(ae)=="function"then ab[ad]=function(...)ab.changed=true;return ac[ad](...)end else ab[ad]=ac[ad]end end;a7.target=ab else a7.target=W(conn)end;a7.status="open"_oldTerm=term.redirect(a7.target)coroutine.resume(a7.thread)if _oldTerm then term.redirect(_oldTerm)else term.restore()end;if framebuffer then H(conn,"textTable",textutils.serialize(a7.target.buffer))a7.target.changed=false end;return a7 end;if#a>=1 and a[1]=="host"then _G.ssh=c;if not D()then print("No modems found. 1 required.")return end;if term.current then if a[2]then rednet.host("tror",a[2])elseif os.getComputerLabel()then rednet.host("tror",os.getComputerLabel())else print("No label or hostname provided!")return end end;local af={}af.target=term.current and term.current()or term.native;local n="shell"if#a>=3 and shell.resolveProgram(a[3])then n=shell.resolveProgram(a[3])end;af.thread=coroutine.create(function()shell.run(n)end)b.localShell=af;term.clear()term.setCursorPos(1,1)coroutine.resume(b.localShell.thread)while true do event={os.pullEventRaw()}if event[1]=="rednet_message"then if type(event[3])=="string"and C[string.sub(event[3],1,2)]then conn=event[2]packetType=C[string.sub(event[3],1,2)]message=string.match(event[3],";(.*)")if b[conn]and b[conn].status=="open"then if packetType=="event"or string.sub(packetType,1,4)=="text"then local ag={}if packetType=="event"then ag=textutils.unserialize(message)else ag=event end;a3(conn,ag)elseif packetType=="query"then local ah,a0,x,y=string.match(message,"(%a+):(%a+);(%d+),(%d+)")if ah=="connect"or ah=="resume"and not framebuffer then H(conn,"response","OK")b[conn]=a6(conn,tonumber(x),tonumber(y),a0=="true")elseif ah=="resume"and b[conn]and tonumber(x)==b[conn].target.buffer.sizeX and tonumber(y)==b[conn].target.buffer.sizeY then H(conn,"response","OK")H(conn,"textTable",textutils.serialize(b[conn].target.buffer))end elseif packetType=="close"then b[conn]=nil;H(conn,"close","disconnect")else a3(conn,event)end elseif packetType~="query"then for k,l in pairs(b)do a3(k,event)end else H(conn,"response","OK")local a0,x,y=string.match(message,"connect:(%a+);(%d+),(%d+)")local af=a6(conn,tonumber(x),tonumber(y),a0=="true")b[conn]=af end else for k,l in pairs(b)do a3(k,event)end end elseif a5[event[1]]then coroutine.resume(b.localShell.thread,unpack(event))if coroutine.status(b.localShell.thread)=="dead"then for k,l in pairs(b)do if k~="localShell"then H(k,"close","disconnect")end end;return end else for k,l in pairs(b)do a3(k,event)end end end elseif#a<=2 and ssh and ssh.getRemoteID()then print(ssh.getRemoteID())local ai=ssh.getRemoteConnections()for e=1,#ai do if ai[e]==serverNum then print("Cyclic connection refused.")return end end;local aj=nil;local ak=nil;local serverNum=a1(a[1])if not serverNum then print("Server Not Found")return end;H(serverNum,"query","connect")local I,message=J(serverNum,2)if I~="response"then print("Connection Failed")return else ssh.connList[ssh.getRemoteID()].outbound=serverNum;term.clear()term.setCursorPos(1,1)end;local al=ssh.getRemoteID()local am=tonumber(a[1])while true do event={os.pullEvent()}if event[1]=="rednet_message"then if event[2]==al or event[2]==am then if event[2]==am and string.sub(event[3],1,2)=="SC"then break end;rednet.send(event[2]==al and am or al,event[3])end elseif a5[event[1]]then rednet.send(am,"EV:;"..textutils.serialize(event))end end;ssh.connList[ssh.getRemoteID()].outbound=nil;term.clear()term.setCursorPos(1,1)print("Connection closed by server")elseif#a>=1 then if not D()then print("No modems found. 1 required.")return end;local serverNum=a1(a[1])if not serverNum then print("Server Not Found")return end;if ssh then local ai=ssh.getRemoteConnections()for e=1,#ai do if ai[e]==serverNum then print("Connection refused.")return end end end;local aj=nil;local ak=nil;local an=nil;local ao={}local a0=term.isColor()local x,y=term.getSize()if a[2]=="resume"then H(serverNum,"query","resume:"..tostring(a0)..";"..tostring(x)..","..tostring(y))else H(serverNum,"query","connect:"..tostring(a0)..";"..tostring(x)..","..tostring(y))end;local j=os.startTimer(2)while true do local event={os.pullEvent()}if event[1]=="timer"and event[2]==j then print("Connection failed.")return elseif event[1]=="rednet_message"and event[2]==serverNum and type(event[3])=="string"and string.sub(event[3],1,2)=="SR"then if ssh then c=ssh end;if c.connList and c.connList.localShell then c.connList.localShell.outbound=serverNum end;c.serverNum=serverNum;c.clientCapabilities="-fileTransfer-extensions-"term.clear()term.setCursorPos(1,1)break end end;while true do event={os.pullEventRaw()}if#ao>0 then for e=#ao,1,-1 do if coroutine.status(ao[e])~="dead"then coroutine.resume(ao[e],unpack(event))else table.remove(ao,e)end end end;if event[1]=="rednet_message"and event[2]==serverNum and type(event[3])=="string"then if C[string.sub(event[3],1,2)]then packetType=C[string.sub(event[3],1,2)]message=string.match(event[3],";(.*)")if string.sub(packetType,1,4)=="text"then P(serverNum,packetType,message)elseif packetType=="data"then if message=="clientCapabilities"then rednet.send(serverNum,c.clientCapabilities)end elseif packetType=="fileQuery"then local ap,a9=string.match(message,"^(%a)=(.*)")if fs.exists(a9)then H(serverNum,"fileHeader",a9)if ap=="b"then local aq=c.packFile(a9)H(serverNum,"fileData","b="..aq)else local q=io.open(a9,"r")if q then H(serverNum,"fileData","t="..q:read("*a"))q:close()end end else H(serverNum,"fileHeader","fileNotFound")end;H(serverNum,"fileEnd","end")elseif packetType=="fileSend"then local ap,a9=string.match(message,"^(%a)=(.*)")if not fs.exists(a9)then aj="receive_wait:"..a9;H(serverNum,"fileResponse","ok")if ap=="b"then an=""ak=nil else ak=""an=nil end else H(serverNum,"fileResponse","reject")end elseif packetType=="fileHeader"then if message=="fileNotFound"then aj=nil end elseif packetType=="fileData"then if aj and string.match(aj,"(.-):")=="receive_wait"then if string.match(message,"^(%a)=")=="b"then an=an..string.match(message,"^b=(.*)")else ak=ak..string.match(message,"^t=(.*)")end end elseif packetType=="fileEnd"then if aj and string.match(aj,"(.-):")=="receive_wait"then if an then local ar=coroutine.create(c.unpackAndSaveFile)coroutine.resume(ar,string.match(aj,":(.*)"),an)if coroutine.status(ar)~="dead"then table.insert(ao,ar)end elseif ak then local q=io.open(string.match(aj,":(.*)"),"w")if q then q:write(ak)q:close()end end;aj=nil end elseif packetType=="close"then if term.isColor()then term.setBackgroundColor(colors.black)term.setTextColor(colors.white)end;term.clear()term.setCursorPos(1,1)print("Connection closed by server.")c.serverNum=nil;if c.connList and c.connList.localShell then c.connList.localShell.outbound=nil end;return end end elseif event[1]=="mouse_click"or event[1]=="mouse_drag"or event[1]=="mouse_scroll"or event[1]=="key"or event[1]=="char"then H(serverNum,"event",textutils.serialize(event))elseif event[1]=="terminate"then c.serverNum=nil;if c.localShell then c.localShell.outbound=nil end;term.clear()term.setCursorPos(1,1)print("Connection closed locally.")return end end else print("Usage: ssh <serverID> [resume]")print("       ssh host [remote [local [name]]]")end